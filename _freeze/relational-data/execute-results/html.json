{
  "hash": "bd20322bfecfe740017e30ae9a46ed33",
  "result": {
    "markdown": "## Filtering Joins\n\nFiltering joins match observations in the same way as [mutating joins](https://dplyr.tidyverse.org/reference/mutate-joins.html), but affect the observations, not the variables. There are two types:\n\n|                   |     |                                                            |\n|--------------|--------------|---------------------------------------------|\n| `semi_join(x, y)` | $x \\ltimes y$ | **Keeps** all observations in `x` that have a match in `y` |\n| `anti_join(x, y)` | $x \\rhd y$ | **Drops** all observations in `x` that have a match in `y` |\n\nGraphically, a semi-join looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](diagrams/join-semi.png){width=307}\n:::\n:::\n\n\nOnly the existence of a match is important; it doesn't matter which observation is matched. This means that filtering joins never duplicate rows like mutating joins do:\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}