{
  "hash": "047eef0ac6c3200d1753d4dc11dc22d9",
  "result": {
    "markdown": "---\ntitle: \"Penguins Distilled\"\ndescription: |\n  A great new article on Penguins\nauthor: Tom Mock\naffiliation: RStudio\ndate: \"2022-07-12\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n---\n\n\n![Diagram of penguin head with indication of bill length and bill depth.](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png)\n\n\n\n\n\n### Literate Programming\n\nPer [Donald Knuth](https://en.wikipedia.org/wiki/Literate_programming)\n\n> A programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated.\n\n### Initial explore\n\nWe can do a quick exploration of the data with `skimr::skim()`. This will report the counts of various variables, along with some basic descriptive statistics. The `skimr` package is fantastic for quickly getting a sense of your datasets.\n\nAhead of `skimr` there are 344 penguins in this dataset, and the unique species are Adelie, Gentoo, Chinstrap.\n\nPer the [rOpenSci `skimr` docs](https://docs.ropensci.org/skimr/index.html):\n\n> `skimr` provides a frictionless approach to summary statistics which conforms to the principle of least surprise, displaying summary statistics the user can skim quickly to understand their data. It handles different data types and returns a skim_df object which can be included in a pipeline or displayed nicely for the human reader.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  group_by(species) %>% \n  skimr::skim() %>% \n  select(-contains(\"numeric.p\"))\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |344        |\n|Number of columns        |8          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|factor                   |2          |\n|numeric                  |5          |\n|________________________ |           |\n|Group variables          |species    |\n\n\n**Variable type: factor**\n\n|skim_variable |species   | n_missing| complete_rate|ordered | n_unique|top_counts                |\n|:-------------|:---------|---------:|-------------:|:-------|--------:|:-------------------------|\n|island        |Adelie    |         0|          1.00|FALSE   |        3|Dre: 56, Tor: 52, Bis: 44 |\n|island        |Chinstrap |         0|          1.00|FALSE   |        1|Dre: 68, Bis: 0, Tor: 0   |\n|island        |Gentoo    |         0|          1.00|FALSE   |        1|Bis: 124, Dre: 0, Tor: 0  |\n|sex           |Adelie    |         6|          0.96|FALSE   |        2|fem: 73, mal: 73          |\n|sex           |Chinstrap |         0|          1.00|FALSE   |        2|fem: 34, mal: 34          |\n|sex           |Gentoo    |         5|          0.96|FALSE   |        2|mal: 61, fem: 58          |\n\n\n**Variable type: numeric**\n\n|skim_variable     |species   | n_missing| complete_rate|    mean|     sd|hist  |\n|:-----------------|:---------|---------:|-------------:|-------:|------:|:-----|\n|bill_length_mm    |Adelie    |         1|          0.99|   38.79|   2.66|▁▆▇▆▁ |\n|bill_length_mm    |Chinstrap |         0|          1.00|   48.83|   3.34|▂▇▇▅▁ |\n|bill_length_mm    |Gentoo    |         1|          0.99|   47.50|   3.08|▃▇▆▁▁ |\n|bill_depth_mm     |Adelie    |         1|          0.99|   18.35|   1.22|▂▆▇▃▁ |\n|bill_depth_mm     |Chinstrap |         0|          1.00|   18.42|   1.14|▅▇▇▆▂ |\n|bill_depth_mm     |Gentoo    |         1|          0.99|   14.98|   0.98|▅▇▇▆▂ |\n|flipper_length_mm |Adelie    |         1|          0.99|  189.95|   6.54|▁▆▇▅▁ |\n|flipper_length_mm |Chinstrap |         0|          1.00|  195.82|   7.13|▁▅▇▅▂ |\n|flipper_length_mm |Gentoo    |         1|          0.99|  217.19|   6.48|▂▇▇▆▃ |\n|body_mass_g       |Adelie    |         1|          0.99| 3700.66| 458.57|▅▇▇▃▂ |\n|body_mass_g       |Chinstrap |         0|          1.00| 3733.09| 384.34|▁▅▇▃▁ |\n|body_mass_g       |Gentoo    |         1|          0.99| 5076.02| 504.12|▃▇▇▇▂ |\n|year              |Adelie    |         0|          1.00| 2008.01|   0.82|▇▁▇▁▇ |\n|year              |Chinstrap |         0|          1.00| 2007.97|   0.86|▇▁▆▁▇ |\n|year              |Gentoo    |         0|          1.00| 2008.08|   0.79|▆▁▇▁▇ |\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### Specific statistics\n\nWe can also explore specific statistics\n\nThe penguins split by species show a specific relationship between weight and flipper length, where the Adelie female penguins are the lighest and have the shortest flippers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  group_by(species, sex) %>% \n  summarize(\n    n = n(), \n    weight = mean(body_mass_g, na.rm = TRUE),\n    flipper_length = mean(flipper_length_mm, na.rm = TRUE)\n    ) %>% \n  arrange(desc(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n# Groups:   species [3]\n  species   sex        n weight flipper_length\n  <fct>     <fct>  <int>  <dbl>          <dbl>\n1 Gentoo    male      61  5485.           222.\n2 Gentoo    female    58  4680.           213.\n3 Gentoo    <NA>       5  4588.           216.\n4 Adelie    male      73  4043.           192.\n5 Chinstrap male      34  3939.           200.\n6 Adelie    <NA>       6  3540            186.\n7 Chinstrap female    34  3527.           192.\n8 Adelie    female    73  3369.           188.\n```\n:::\n:::\n\n\nLooks like the Adelie are the lightest penguin. I want to see their distribution along with the overall distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(is.na(sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           NA            NA                  NA          NA\n 2 Adelie  Torgersen           34.1          18.1               193        3475\n 3 Adelie  Torgersen           42            20.2               190        4250\n 4 Adelie  Torgersen           37.8          17.1               186        3300\n 5 Adelie  Torgersen           37.8          17.3               180        3700\n 6 Adelie  Dream               37.5          18.9               179        2975\n 7 Gentoo  Biscoe              44.5          14.3               216        4100\n 8 Gentoo  Biscoe              46.2          14.4               214        4650\n 9 Gentoo  Biscoe              47.3          13.8               216        4725\n10 Gentoo  Biscoe              44.5          15.7               217        4875\n11 Gentoo  Biscoe              NA            NA                  NA          NA\n# … with 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsmaller <- palmerpenguins::penguins %>% \n  filter(species == \"Adelie\", \n         !is.na(body_mass_g))\n```\n:::\n\n\n### Cleanup the data\n\nIf you noticed above, there was some NA or missing data. We can remove those rows for now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_clean <- penguins %>% \n  na.omit() %>% \n  mutate(species_num = as.numeric(species))\n```\n:::\n\n\n### Plot Section\n\nLet's move on to some plots, for the overall distributions and for just the Adelie penguins. The overall distribution of the data by species shows some overlap in body weight for Adelie/Chinstrap, but more of a separation for the Gentoo penguins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(body_mass_g, fill = species)) + \n  geom_density(color = \"white\", alpha = 0.5) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Penguin Bins\")\n```\n\n::: {.cell-output-display}\n![](penguin-report_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWhen we compare just within the Adelie penguins, we can see more of a specific separation of male vs female. However, there is still a decent amount of overlapping data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_plot <- smaller %>% \n  filter(!is.na(sex)) %>% \n  ggplot(aes(body_mass_g, fill = sex)) + \n  geom_density(color = \"white\", alpha = 0.5) +\n    scale_fill_manual(values = c(\"darkorange\",\"purple\")) +\n  labs(x = \"Penguin Bins\")\n\npenguin_plot\n```\n\n::: {.cell-output-display}\n![](penguin-report_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLastly we can fit a basic linear model comparing body weight in grams to the flipper length of the penguins by specific species. There is a strong linear relationship, although it's a bit difficult to distinguish between Chinstrap and Adelie penguins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_size_plot <- penguins_clean %>% \n  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = species)) + \n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  geom_point(size = 2, alpha = 0.5) +\n  labs(x = \"Mass (g)\", y = \"Flipper Length (mm)\") +\n  geom_smooth(aes(group = \"none\"), method = \"lm\")\n\npenguin_size_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](penguin-report_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe can save the overall distribution and the linear model plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"penguin-dist.png\", penguin_plot, \n  dpi = \"retina\", height = 8, width = 8)\n\nggsave(\"penguin-smooth.png\", penguin_size_plot, \n  dpi = \"retina\", height = 8, width = 8)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n:::\n\n\n### Modeling section\n\nMoving on to some basic modeling we can see if what kind of relationships we observe in the data. Note that I'm really not following any plan, just indicating how you can fit some different models all at once with `dplyr` + `broom`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_inputs <- tibble(\n  model_form = c(\n    list(flipper_length_mm ~ body_mass_g),\n    list(species_num ~ bill_length_mm + body_mass_g + sex),\n    list(flipper_length_mm ~ bill_length_mm + species)\n    ),\n  data = list(penguins_clean)\n) \n\nmodel_metrics <- model_inputs %>% \n  rowwise(model_form, data) %>% \n  summarize(lm = list(lm(model_form, data = data)), .groups = \"drop\") %>% \n  rowwise(model_form, lm, data) %>% \n  summarise(broom::glance(lm), .groups = \"drop\")\n```\n:::\n\n\n### Wrap up\n\nWe can then take the model outcomes and throw them into a quick `gt` table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_metrics %>% \n  select(model_form, r.squared:p.value) %>% \n  mutate(model_form = as.character(model_form)) %>% \n  gt::gt() %>% \n  gt::fmt_number(r.squared:statistic) %>% \n  gt::fmt_scientific(p.value) %>% \n  gt::cols_width(\n    model_form ~ px(150)\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"emukmuudys\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#emukmuudys .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#emukmuudys .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#emukmuudys .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#emukmuudys .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#emukmuudys .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#emukmuudys .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#emukmuudys .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#emukmuudys .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#emukmuudys .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#emukmuudys .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#emukmuudys .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#emukmuudys .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#emukmuudys .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#emukmuudys .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#emukmuudys .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#emukmuudys .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#emukmuudys .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#emukmuudys .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#emukmuudys .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#emukmuudys .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#emukmuudys .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#emukmuudys .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#emukmuudys .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#emukmuudys .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#emukmuudys .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#emukmuudys .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#emukmuudys .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#emukmuudys .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#emukmuudys .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#emukmuudys .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#emukmuudys .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#emukmuudys .gt_left {\n  text-align: left;\n}\n\n#emukmuudys .gt_center {\n  text-align: center;\n}\n\n#emukmuudys .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#emukmuudys .gt_font_normal {\n  font-weight: normal;\n}\n\n#emukmuudys .gt_font_bold {\n  font-weight: bold;\n}\n\n#emukmuudys .gt_font_italic {\n  font-style: italic;\n}\n\n#emukmuudys .gt_super {\n  font-size: 65%;\n}\n\n#emukmuudys .gt_two_val_uncert {\n  display: inline-block;\n  line-height: 1em;\n  text-align: right;\n  font-size: 60%;\n  vertical-align: -0.25em;\n  margin-left: 0.1em;\n}\n\n#emukmuudys .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#emukmuudys .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#emukmuudys .gt_slash_mark {\n  font-size: 0.7em;\n  line-height: 0.7em;\n  vertical-align: 0.15em;\n}\n\n#emukmuudys .gt_fraction_numerator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: 0.45em;\n}\n\n#emukmuudys .gt_fraction_denominator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: -0.05em;\n}\n</style>\n<table class=\"gt_table\" style=\"table-layout: fixed;\">\n  <colgroup>\n    <col style=\"width:150px;\"/>\n    <col/>\n    <col/>\n    <col/>\n    <col/>\n    <col/>\n  </colgroup>\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">model_form</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">r.squared</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">adj.r.squared</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">sigma</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">statistic</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_left\">flipper_length_mm ~ body_mass_g</td>\n<td class=\"gt_row gt_right\">0.76</td>\n<td class=\"gt_row gt_right\">0.76</td>\n<td class=\"gt_row gt_right\">6.85</td>\n<td class=\"gt_row gt_right\">1,060.30</td>\n<td class=\"gt_row gt_right\">3.13 &times; 10<sup class='gt_super'>&minus;105</sup></td></tr>\n    <tr><td class=\"gt_row gt_left\">species_num ~ bill_length_mm + body_mass_g + sex</td>\n<td class=\"gt_row gt_right\">0.84</td>\n<td class=\"gt_row gt_right\">0.84</td>\n<td class=\"gt_row gt_right\">0.36</td>\n<td class=\"gt_row gt_right\">583.59</td>\n<td class=\"gt_row gt_right\">2.45 &times; 10<sup class='gt_super'>&minus;131</sup></td></tr>\n    <tr><td class=\"gt_row gt_left\">flipper_length_mm ~ bill_length_mm + species</td>\n<td class=\"gt_row gt_right\">0.83</td>\n<td class=\"gt_row gt_right\">0.83</td>\n<td class=\"gt_row gt_right\">5.83</td>\n<td class=\"gt_row gt_right\">529.22</td>\n<td class=\"gt_row gt_right\">1.66 &times; 10<sup class='gt_super'>&minus;125</sup></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nOverall, this was a quick overview of the beauty of literate programming. We have R code that is self-documenting, as we capture our thoughts and the outputs in a single document. We know at some level that the code works since it \"logs\" the outputs at various stages and could still output to additional log files. To render it has to run successfully in a linear fashion, and it is human readable as code, via the visual editor or even in version control like Git!\n\n------------------------------------------------------------------------",
    "supporting": [
      "penguin-report_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}